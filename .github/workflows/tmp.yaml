name: Build and Deploy to ECR

on:
  push:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}

jobs:
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Configure AWS OIDC 
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::023182678225:role/AWSAccessOIDCGitHub
        aws-region: ${{ env.AWS_REGION }}
        


    # - name: Login to Amazon ECR
    #   id: login-ecr
    #   uses: aws-actions/amazon-ecr-login@v2

    # - name: Extract metadata
    #   id: meta
    #   run: |
    #     # 브랜치명 또는 태그명에서 이미지 태그 생성
    #     if [[ $GITHUB_REF == refs/tags/* ]]; then
    #       # 태그 푸시인 경우
    #       VERSION=${GITHUB_REF#refs/tags/}
    #     else
    #       # 브랜치 푸시인 경우
    #       VERSION=${GITHUB_REF#refs/heads/}
    #       # main 브랜치인 경우 latest 태그도 추가
    #       if [[ $VERSION == "main" ]]; then
    #         VERSION="latest"
    #       fi
    #     fi
        
    #     # 짧은 커밋 해시 추가
    #     SHORT_SHA=${GITHUB_SHA::8}
        
    #     echo "version=${VERSION}" >> $GITHUB_OUTPUT
    #     echo "sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
    #     echo "registry=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_OUTPUT

    # - name: Build Docker image
    #   env:
    #     ECR_REGISTRY: ${{ steps.meta.outputs.registry }}
    #     IMAGE_TAG: ${{ steps.meta.outputs.version }}
    #     IMAGE_SHA: ${{ steps.meta.outputs.sha }}
    #   run: |
    #     # Docker 이미지 빌드
    #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
    #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA .
        
    #     # main 브랜치인 경우 latest 태그도 추가
    #     if [[ "$IMAGE_TAG" == "latest" ]]; then
    #       docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
    #     fi

    # - name: Run tests (optional)
    #   run: |
    #     # 여기에 테스트 명령어 추가 가능
    #     # docker run --rm $ECR_REGISTRY/$ECR_REPOSITORY:${{ steps.meta.outputs.version }} python -m pytest
    #     echo "Tests would run here"

    # - name: Push image to Amazon ECR
    #   env:
    #     ECR_REGISTRY: ${{ steps.meta.outputs.registry }}
    #     IMAGE_TAG: ${{ steps.meta.outputs.version }}
    #     IMAGE_SHA: ${{ steps.meta.outputs.sha }}
    #   run: |
    #     # ECR에 이미지 푸시
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA
        
    #     # main 브랜치인 경우 latest도 푸시
    #     if [[ "$IMAGE_TAG" == "latest" ]]; then
    #       docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
    #     fi

    # - name: Output image URIs
    #   env:
    #     ECR_REGISTRY: ${{ steps.meta.outputs.registry }}
    #     IMAGE_TAG: ${{ steps.meta.outputs.version }}
    #     IMAGE_SHA: ${{ steps.meta.outputs.sha }}
    #   run: |
    #     echo "Image URIs:"
    #     echo "- $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    #     echo "- $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA"